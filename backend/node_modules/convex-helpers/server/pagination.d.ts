import { Value } from "convex/values";
import { DocumentByName, GenericDataModel, GenericDatabaseReader, IndexNames, NamedTableInfo, SchemaDefinition, TableNamesInDataModel } from "convex/server";
export type IndexKey = Value[];
export type PageRequest<DataModel extends GenericDataModel, T extends TableNamesInDataModel<DataModel>> = {
    /** Request a page of documents from this table. */
    table: T;
    /** Where the page starts. Default or empty array is the start of the table. */
    startIndexKey?: IndexKey;
    /** Whether the startIndexKey is inclusive. Default is false. */
    startInclusive?: boolean;
    /** Where the page ends. If provided, all documents up to this key will be
     * included, if possible. targetMaxRows will be ignored (but absoluteMaxRows
     * will not). This ensures adjacent pages stay adjacent, even as they grow.
     * An empty array means the end of the table.
     */
    endIndexKey?: IndexKey;
    /** Whether the endIndexKey is inclusive. Default is true.*/
    endInclusive?: boolean;
    /** Maximum number of rows to return, as long as endIndexKey is not provided.
     * Default is 100.
     */
    targetMaxRows?: number;
    /** Absolute maximum number of rows to return, even if endIndexKey is
     * provided. Use this to prevent a single page from growing too large, but
     * watch out because gaps can form between pages.
     * Default is unlimited.
     */
    absoluteMaxRows?: number;
    /** Whether the index is walked in ascending or descending order. Default is
     * ascending.
     */
    order?: "asc" | "desc";
    /** Which index to walk.
     * Default is by_creation_time.
     */
    index?: IndexNames<NamedTableInfo<DataModel, T>>;
    /** If index is not by_creation_time or by_id,
     * you need to provide the index fields, either directly or from the schema.
     * schema can be found with
     * `import schema from "./schema";`
     */
    schema?: SchemaDefinition<any, boolean>;
    /** The fields of the index, if you specified an index and not a schema. */
    indexFields?: string[];
};
export type PageResponse<DataModel extends GenericDataModel, T extends TableNamesInDataModel<DataModel>> = {
    /** Page of documents in the table.
     * Order is by the `index`, possibly reversed by `order`.
     */
    page: DocumentByName<DataModel, T>[];
    /** hasMore is true if this page did not exhaust the queried range.*/
    hasMore: boolean;
    /** indexKeys[i] is the index key for the document page[i].
     * indexKeys can be used as `startIndexKey` or `endIndexKey` to fetch pages
     * relative to this one.
     */
    indexKeys: IndexKey[];
};
/**
 * Get a single page of documents from a table.
 * See examples in README.
 * @param ctx A ctx from a query or mutation context.
 * @param request What page to get.
 * @returns { page, hasMore, indexKeys }.
 */
export declare function getPage<DataModel extends GenericDataModel, T extends TableNamesInDataModel<DataModel>>(ctx: {
    db: GenericDatabaseReader<DataModel>;
}, request: PageRequest<DataModel, T>): Promise<PageResponse<DataModel, T>>;
//# sourceMappingURL=pagination.d.ts.map